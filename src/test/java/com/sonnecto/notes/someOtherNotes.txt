Automation framework:
    organize the code to make it re-usable and maintainable and readable.
    organizes/structures the project into main sections so that we can manage easily.
==========================================================================================
Do you know how to set up automation framework from scratch?
    Yes, of course.

    When setting up BDD framework, I use:
    Java => as my programming language
    Selenium WebDriver => as my automation tool
    Cucumber => for BDD approach that helps with code reusability,
                also for bridging the gap between technical and non-tech people.
    JUnit => for assertions
    Maven => as my build automation tool, and for dependency management(pom.xml).
==========================================================================================

    Git and GitHub for version control.
    I follow clean code principles and Java programming conventions.
    I make sure to write reusable utility methods and make code readable and maintainable.
=============================================================================================

    If we talk about how I structure my framework:
        Cucumber BDD Project:
            packages:
               pages:
                    page objects: LoginPage, SearchPage etc.
               runners:
                    CukesRunner
               step_definitions:
                    LoginStepDefs, AddAccountStepDefs...
               utilities:
                -general utilities:
                    Driver, ConfigurationReader, BrowserUtils ...
                -app specific utilities:
                    WebOrdersUtil, EtsyUtil...

            resources:
               features:
                  weborders_add.feature
                  weborders_remove.feature

            configuration.properties:
                store test data, urls, credentials etc..
            pom.xml
                dependency management
==========================================================================

We cannot add dependencies from mvnrepository.com when we join a company.
    They will have their internal dependency repository
    Nexus company repository -> AutomationProject in our company computers.

You join the company and they don't have cucumber dependency in the company Nexus:
    You place the request and wait for approval.
================================================================================================================

Background: keyword in Cucumber BDD

    Background is a Gherkin keyword similar to Scenario, When, Then etc...

    If we put any step(s) under Background keyword
        those steps will run before every scenario in the feature file.

    Feature: Example

    Background: //this will run before all the Scenarios.
        User is on Google home page

    Scenario: one
        Given User searches for a book
        Then book results should be displayed
    Scenario: two
        Given User searches for a photo
        Then image should be displayed
    Scenario: three
        Given User searches for a movie
        Then Movies should be displayed

When we execute the above scenarios:

    Flow will be:
        Background =>> Scenario one
        Background =>> Scenario two
        Background =>> Scenario three

Steps in background will run before each scenario steps.
    It is similar to @BeforeMethod in TestNG.
===============================================

Usually in background, we put common steps that need to run before each scenario.
    Could be: going to homepage, logging in etc...

Some pre-condition steps can also go to background:
    creating new product etc..
==============================================

    Passing parameters through Feature file:
        single parameter, multiple as a List, Map etc..

    PARAMETERIZATION: ability to pass one or more parameters to our test from Feature file.

        Single parameter:
            "hi" => {string}
             44 => {int}
        Multiple parameters, by default Cucumber looks at it as DataTable.
        DataTable is generic structure used by Cucumber, and we change it to List, Map etc..

        Background: contains steps that run before each scenario.

    In TestNG framework, opening and closing the browser was done in TestBase class.

    In Cucumber BDD framework, we add a class called Hooks into Step definitions.
        This name is common in Cucumber BDD frameworks and is used similar to TestBase.

    Cucumber has some annotations.
    @Before -> steps run before each scenario.
    @After -> steps run after each scenario.

    Let's go to StepDefinitions and add a class Hooks.java

MAKE SURE TO IMPORT FROM CUCUMBER.IO PACKAGE.
    These annotations come from cucumber io package and is part of cucumber bdd library.
        Not JUnit or TestNG.

    Usually we name the class Hooks.java and add setUp and tearDown methods with
        @Before and @After annotations.
    We place this class in step_definitions package and it will run automatically
        before and after each Cucumber Scenario.

    No need to extend anything or use inheritance or import.

    When Scenario is running, cucumber runner will scan and look for @Before and @After
        annotated methods in StepDefs package.
    If it finds them, it will run them.
================================================

    @BeforeStep => steps run before each scenario step
    @After Step => after
        We might need it to take screenshot of each step as evidence.


















